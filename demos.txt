# Demo 1

.create table DeviceNetworkEventsRaw (records:dynamic)

.create-or-alter table DeviceNetworkEventsRaw ingestion json mapping 'DeviceNetworkEventsRawMapping' '[{"Column":"records","Properties":{"path":"$.records"}}]'

.create table DeviceNetworkEvents (Timestamp:datetime,DeviceId:string,DeviceName:string,ActionType:string,RemoteIP:string,RemotePort:int,RemoteUrl:string,LocalIP:string,LocalPort:int,Protocol:string,LocalIPType:string,RemoteIPType:string,InitiatingProcessSHA1:string,InitiatingProcessSHA256:string,InitiatingProcessMD5:string,InitiatingProcessFileName:string,InitiatingProcessFileSize:long,InitiatingProcessVersionInfoCompanyName:string,InitiatingProcessVersionInfoProductName:string,InitiatingProcessVersionInfoProductVersion:string,InitiatingProcessVersionInfoInternalFileName:string,InitiatingProcessVersionInfoOriginalFileName:string,InitiatingProcessVersionInfoFileDescription:string,InitiatingProcessId:long,InitiatingProcessCommandLine:string,InitiatingProcessCreationTime:datetime,InitiatingProcessFolderPath:string,InitiatingProcessParentFileName:string,InitiatingProcessParentId:long,InitiatingProcessParentCreationTime:datetime,InitiatingProcessAccountDomain:string,InitiatingProcessAccountName:string,InitiatingProcessAccountSid:string,InitiatingProcessAccountUpn:string,InitiatingProcessAccountObjectId:string,InitiatingProcessIntegrityLevel:string,InitiatingProcessTokenElevation:string,ReportId:long,AppGuardContainerId:string,AdditionalFields:string)

.create-or-alter function DeviceNetworkEventsExpand {DeviceNetworkEventsRaw | mv-expand events = records | project Timestamp = todatetime(events.properties.Timestamp),DeviceId = tostring(events.properties.DeviceId),DeviceName = tostring(events.properties.DeviceName),ActionType = tostring(events.properties.ActionType),RemoteIP = tostring(events.properties.RemoteIP),RemotePort = toint(events.properties.RemotePort),RemoteUrl = tostring(events.properties.RemoteUrl),LocalIP = tostring(events.properties.LocalIP),LocalPort = toint(events.properties.LocalPort),Protocol = tostring(events.properties.Protocol),LocalIPType = tostring(events.properties.LocalIPType),RemoteIPType = tostring(events.properties.RemoteIPType),InitiatingProcessSHA1 = tostring(events.properties.InitiatingProcessSHA1),InitiatingProcessSHA256 = tostring(events.properties.InitiatingProcessSHA256),InitiatingProcessMD5 = tostring(events.properties.InitiatingProcessMD5),InitiatingProcessFileName = tostring(events.properties.InitiatingProcessFileName),InitiatingProcessFileSize = tolong(events.properties.InitiatingProcessFileSize),InitiatingProcessVersionInfoCompanyName = tostring(events.properties.InitiatingProcessVersionInfoCompanyName),InitiatingProcessVersionInfoProductName = tostring(events.properties.InitiatingProcessVersionInfoProductName),InitiatingProcessVersionInfoProductVersion = tostring(events.properties.InitiatingProcessVersionInfoProductVersion),InitiatingProcessVersionInfoInternalFileName = tostring(events.properties.InitiatingProcessVersionInfoInternalFileName),InitiatingProcessVersionInfoOriginalFileName = tostring(events.properties.InitiatingProcessVersionInfoOriginalFileName),InitiatingProcessVersionInfoFileDescription = tostring(events.properties.InitiatingProcessVersionInfoFileDescription),InitiatingProcessId = tolong(events.properties.InitiatingProcessId),InitiatingProcessCommandLine = tostring(events.properties.InitiatingProcessCommandLine),InitiatingProcessCreationTime = todatetime(events.properties.InitiatingProcessCreationTime),InitiatingProcessFolderPath = tostring(events.properties.InitiatingProcessFolderPath),InitiatingProcessParentFileName = tostring(events.properties.InitiatingProcessParentFileName),InitiatingProcessParentId = tolong(events.properties.InitiatingProcessParentId),InitiatingProcessParentCreationTime = todatetime(events.properties.InitiatingProcessParentCreationTime),InitiatingProcessAccountDomain = tostring(events.properties.InitiatingProcessAccountDomain),InitiatingProcessAccountName = tostring(events.properties.InitiatingProcessAccountName),InitiatingProcessAccountSid = tostring(events.properties.InitiatingProcessAccountSid),InitiatingProcessAccountUpn = tostring(events.properties.InitiatingProcessAccountUpn),InitiatingProcessAccountObjectId = tostring(events.properties.InitiatingProcessAccountObjectId),InitiatingProcessIntegrityLevel = tostring(events.properties.InitiatingProcessIntegrityLevel),InitiatingProcessTokenElevation = tostring(events.properties.InitiatingProcessTokenElevation),ReportId = tolong(events.properties.ReportId),AppGuardContainerId = tostring(events.properties.AppGuardContainerId),AdditionalFields = tostring(events.properties.AdditionalFields) }

.alter table DeviceNetworkEvents policy update @'[{"Source": "DeviceNetworkEventsRaw", "Query": "DeviceNetworkEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'




# DEMO 2

**Logstash VM**
ssh koosadmin@vmlogstashbitdefend.eastus.cloudapp.azure.com
koosadmin

sudo /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/syslog-to-sentinel.conf

## Bluecoat Proxy example
logger -p local4.warn -P 5514 -n 127.0.0.1 --rfc3164 -t CEF "2024-07-14 02:08:18 43 10.139.159.7 - - storeofficecentral.domain.com 192.168.7.44 None - - OBSERVED \"No_Caching;No_AVScanning;Shopping\" -  200 TCP_NC_MISS POST text/xml;%20charset=utf-8 http storeofficecentral.domain.com 80 /SubmitStoreDataService.asmx - asmx - 192.168.1.21 712 776 - \"unavailable\" \"unavailable\" \"unavailable\" unavailable df620c841cc57b46-0000000295e8a526-0000000066933312 - -"

proxy_CL
ASim_NetworkSession_BluecoatProxy

sudo /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/syslog-to-sentinel-samplefile.conf

./scripts/Get-AdxCommands.ps1 -sampleFileDirectory ./logsamples/

## ADX Script

.create table proxy_CL_Raw ( ls_timestamp: datetime, ls_version: string, event: string, host: string, log: string, message: string, process: string, service: string )

.create-or-alter table proxy_CL_Raw ingestion json mapping 'proxyclraw_mapping' '[ { "column": "ls_timestamp", "path": "$[\'@timestamp\']", "datatype": "", "transform": null }, { "column": "ls_version", "path": "$[\'@version\']", "datatype": "", "transform": null }, { "column": "event", "path": "$[\'event\']", "datatype": "", "transform": null }, { "column": "host", "path": "$[\'host\']", "datatype": "", "transform": null }, { "column": "log", "path": "$[\'log\']", "datatype": "", "transform": null }, { "column": "message", "path": "$[\'message\']", "datatype": "", "transform": null }, { "column": "process", "path": "$[\'process\']", "datatype": "", "transform": null }, { "column": "service", "path": "$[\'service\']", "datatype": "", "transform": null } ]'

.alter table proxy_CL (ls_timestamp:datetime, connector_host:string, Country:string, host:string, ls_version:string, message:string, tags:string, type:string, logTime:datetime, time_taken:long, c_ip:string, dv_userdn:string, dv_auth_groups:string, hostname:string, hostip:string, cs_userdn:string, cs_auth_groups:string, exception_id:string, sc_filter_result:string, cs_categories:dynamic, cs_referrer:string, sc_status:string, s_action:string, cs_method:string, content_type:dynamic, cs_uri_scheme:string, cs_host:string, cs_uri_port:string, cs_uri_path:string, cs_uri_query:string, cs_uri_extension:string, cs_user_agent:string, s_ip:string, sent_bytes:long, received_bytes:long, virus_id:string, app_name:string, app_operation:string, src_port:string, cs_threat_risk:string, sid:string, country:string)

.create-or-alter function proxy_CL_Parser()
{ 
proxy_CL_Raw
// Parse 1/3 of 'message'. Seperated due to extract_all() operator limited to 16 regex groups
| extend Parser = extract_all(@'^(\d{4}\-\d{2}-\d{2})\s+(\d{2}\:\d{2}:\d{2})\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+([\S\s]+)',dynamic([1,2,3,4,5,6,7,8,9,10,11,12]), message)
| mv-expand Parser
| extend logTime = todatetime(strcat(tostring(Parser[0]),'T',tostring(Parser[1]))), 
    time_taken = tolong(Parser[2]), 
    c_ip = tostring(Parser[3]), 
    dv_userdn = tostring(Parser[4]),                            // New field compare to Microsoft parser on Github
    dv_auth_groups = replace(@"%20",@'',tostring(Parser[5])),   // New field compare to Microsoft parser on Github
    hostname = tostring(Parser[6]),                             // New field compare to Microsoft parser on Github
    hostip = tostring(Parser[7]),                               // New field compare to Microsoft parser on Github
    cs_userdn = tostring(Parser[8]), 
    cs_auth_groups= replace(@"%20",@'',tostring(Parser[9])), 
    exception_id = tostring(Parser[10]), 
    RemainingString1 = Parser[11]
// Parse 2/3 of 'message'
| extend Parser2 = extract_all(@'^(\S+)\s+\"([\w\s\)\(;\/_-]+)\"\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+([\S\s]+)',dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]), tostring(RemainingString1))
| mv-expand Parser2
| extend sc_filter_result = tostring(Parser2[0]), 
    cs_categories = split(Parser2[1],";"),
    cs_referrer = tostring(Parser2[2]), 
    sc_status = tostring(Parser2[3]), 
    s_action = tostring(Parser2[4]), 
    cs_method= tostring(Parser2[5]), 
    content_type = split(replace(@"%20",@'',tostring(Parser2[6])),";"), 
    cs_uri_scheme = tostring(Parser2[7]), 
    cs_host = tostring(Parser2[8]), 
    cs_uri_port = tostring(Parser2[9]), 
    cs_uri_path = tostring(Parser2[10]), 
    cs_uri_query = tostring(Parser2[11]), 
    cs_uri_extension = tostring(Parser2[12]),
    RemainingString2 = Parser2[13]
// Parse 3/3 of 'message'
| extend Parser3 = extract_all(@'^(\"([\w\s\)\,\.\(\;\:\/\_\-\|\}\{\%\=\+\?\<\>\#\]\[]+)\"|(\S+))\s+(\S+)\s+(\S+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)',dynamic([1,2,3,4,5,6,7,8,9,10,12,13,14,15,16]), tostring(RemainingString2))
| mv-expand Parser3
| extend cs_user_agent = tostring(Parser3[1]),
    s_ip = tostring(Parser3[3]), 
    sent_bytes =  tolong(Parser3[4]),
    received_bytes = tolong(Parser3[5]), 
    virus_id = tostring(Parser3[6]),
    app_name = tostring(Parser3[7]), 
    app_operation = tostring(Parser3[8]), 
    src_port = tostring(Parser3[9]), 
    cs_threat_risk = tostring(Parser3[11]),
    sid = tostring(Parser3[10]),                                // New field compare to Microsoft parser on Github
    country = replace(@"%20",@' ',tostring(Parser3[12]))
| project-away Parser, Parser2, Parser3, RemainingString1, RemainingString2 // keep 'message' for when parser might fail
}

.alter table proxy_CL policy update @'[{"Source": "proxy_CL_Raw", "Query": "proxy_CL_Parser()", "IsEnabled": "True", "IsTransactional": true}]'


sudo /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/syslog-to-adx.conf




./spl1tr.ps1 -SubscriptionId "412f40b6-0a47-4dcc-80a4-17fc5c679c0e" -WorkspaceName "law-sentinel-01" -PathToYamlFiles "../parameters/transformations/" -ResourceGroupName "rg-sentinel-01" -SaveTemplate























./DefenderArchiveR.ps1 `
    -TenantId "8c884f39-eb63-49ee-83e4-7ebe060b8e5a" `
    -appId "d5cd9e81-c5f5-4f4e-9ff6-736c7401c1de" `
    -appSecret $appSecret `
    -subscriptionId "c2fa5885-0b00-4976-96d4-b4ea2fa9d578" `
    -resourceGroupName "rg-m365d-archive-01" `
    -saveAdxScript `
    -m365defenderTables "`
        DeviceInfo, `
        DeviceNetworkInfo, `
        DeviceProcessEvents, `
        DeviceNetworkEvents, `
        DeviceFileEvents, `
        DeviceRegistryEvents, `
        DeviceLogonEvents, `
        DeviceEvents, `
        DeviceFileCertificateInfo, `
        EmailAttachmentInfo, `
        EmailEvents, `
        EmailUrlInfo `
    " `
    -deploySentinelFunctions


$tenantId            = [System.Text.ASCIIEncoding]::ASCII.GetString([System.Convert]::FromBase64String(" YTZiMTY5ZjEtNTkyYi00MzI5LThmMzMtOGRiODkwMzAwM2M3 "))
$serviceprincipalId  = [System.Text.ASCIIEncoding]::ASCII.GetString([System.Convert]::FromBase64String(" YjIzMTFjMzctNTU0ZC00NzEzLThkYjktMzZiZWQ4MzBlNTQy "))
$servicePrincipalKey = [System.Text.ASCIIEncoding]::ASCII.GetString([System.Convert]::FromBase64String(" VTRVOFF+bWJtcEpzWEdnLm0wejZiRDFKYm5Bcnc1Z0VlelU0b2NCUg== "))















@'


DeviceEvents
| take 1


let TimeFilter = "where Timestamp between (startofday(ago(1d)) .. endofday(ago(1d)))";
    DeviceEvents
    | getschema
    | summarize CalculateStringLengths = array_strcat(make_list(strcat("strlen(tostring(", ColumnName, "))")), " + ")
    | project strcat("DeviceEvents", " | ", TimeFilter, " | project totalLengthBytes = ", CalculateStringLengths, " | summarize totalThroughputGB = sum(totalLengthBytes) / (1024 * 1024 * 1024) * 2")

print totalThroughputGB = 282
| extend TPUs = totalThroughputGB * 1024 / 24 /60 /60


'@


./CalculateTableSizing.ps1 `
    -tenantId $tenantId `
    -appId $serviceprincipalId `
    -appSecret $servicePrincipalKey
